// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankAccountServiceClient is the client API for BankAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankAccountServiceClient interface {
	AddBankAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error)
	AddBankAccountStream(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (BankAccountService_AddBankAccountStreamClient, error)
	AddAccounts(ctx context.Context, opts ...grpc.CallOption) (BankAccountService_AddAccountsClient, error)
	AddAccountStreamBoth(ctx context.Context, opts ...grpc.CallOption) (BankAccountService_AddAccountStreamBothClient, error)
}

type bankAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBankAccountServiceClient(cc grpc.ClientConnInterface) BankAccountServiceClient {
	return &bankAccountServiceClient{cc}
}

func (c *bankAccountServiceClient) AddBankAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := c.cc.Invoke(ctx, "/pb.BankAccountService/AddBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountServiceClient) AddBankAccountStream(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (BankAccountService_AddBankAccountStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankAccountService_ServiceDesc.Streams[0], "/pb.BankAccountService/AddBankAccountStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankAccountServiceAddBankAccountStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BankAccountService_AddBankAccountStreamClient interface {
	Recv() (*AccountResulStream, error)
	grpc.ClientStream
}

type bankAccountServiceAddBankAccountStreamClient struct {
	grpc.ClientStream
}

func (x *bankAccountServiceAddBankAccountStreamClient) Recv() (*AccountResulStream, error) {
	m := new(AccountResulStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankAccountServiceClient) AddAccounts(ctx context.Context, opts ...grpc.CallOption) (BankAccountService_AddAccountsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankAccountService_ServiceDesc.Streams[1], "/pb.BankAccountService/AddAccounts", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankAccountServiceAddAccountsClient{stream}
	return x, nil
}

type BankAccountService_AddAccountsClient interface {
	Send(*BankAccount) error
	CloseAndRecv() (*Accounts, error)
	grpc.ClientStream
}

type bankAccountServiceAddAccountsClient struct {
	grpc.ClientStream
}

func (x *bankAccountServiceAddAccountsClient) Send(m *BankAccount) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bankAccountServiceAddAccountsClient) CloseAndRecv() (*Accounts, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Accounts)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bankAccountServiceClient) AddAccountStreamBoth(ctx context.Context, opts ...grpc.CallOption) (BankAccountService_AddAccountStreamBothClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankAccountService_ServiceDesc.Streams[2], "/pb.BankAccountService/AddAccountStreamBoth", opts...)
	if err != nil {
		return nil, err
	}
	x := &bankAccountServiceAddAccountStreamBothClient{stream}
	return x, nil
}

type BankAccountService_AddAccountStreamBothClient interface {
	Send(*BankAccount) error
	Recv() (*AccountResulStream, error)
	grpc.ClientStream
}

type bankAccountServiceAddAccountStreamBothClient struct {
	grpc.ClientStream
}

func (x *bankAccountServiceAddAccountStreamBothClient) Send(m *BankAccount) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bankAccountServiceAddAccountStreamBothClient) Recv() (*AccountResulStream, error) {
	m := new(AccountResulStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankAccountServiceServer is the server API for BankAccountService service.
// All implementations must embed UnimplementedBankAccountServiceServer
// for forward compatibility
type BankAccountServiceServer interface {
	AddBankAccount(context.Context, *BankAccount) (*BankAccount, error)
	AddBankAccountStream(*BankAccount, BankAccountService_AddBankAccountStreamServer) error
	AddAccounts(BankAccountService_AddAccountsServer) error
	AddAccountStreamBoth(BankAccountService_AddAccountStreamBothServer) error
	mustEmbedUnimplementedBankAccountServiceServer()
}

// UnimplementedBankAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBankAccountServiceServer struct {
}

func (UnimplementedBankAccountServiceServer) AddBankAccount(context.Context, *BankAccount) (*BankAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankAccount not implemented")
}
func (UnimplementedBankAccountServiceServer) AddBankAccountStream(*BankAccount, BankAccountService_AddBankAccountStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddBankAccountStream not implemented")
}
func (UnimplementedBankAccountServiceServer) AddAccounts(BankAccountService_AddAccountsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddAccounts not implemented")
}
func (UnimplementedBankAccountServiceServer) AddAccountStreamBoth(BankAccountService_AddAccountStreamBothServer) error {
	return status.Errorf(codes.Unimplemented, "method AddAccountStreamBoth not implemented")
}
func (UnimplementedBankAccountServiceServer) mustEmbedUnimplementedBankAccountServiceServer() {}

// UnsafeBankAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankAccountServiceServer will
// result in compilation errors.
type UnsafeBankAccountServiceServer interface {
	mustEmbedUnimplementedBankAccountServiceServer()
}

func RegisterBankAccountServiceServer(s grpc.ServiceRegistrar, srv BankAccountServiceServer) {
	s.RegisterService(&BankAccountService_ServiceDesc, srv)
}

func _BankAccountService_AddBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountServiceServer).AddBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BankAccountService/AddBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountServiceServer).AddBankAccount(ctx, req.(*BankAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccountService_AddBankAccountStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BankAccount)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BankAccountServiceServer).AddBankAccountStream(m, &bankAccountServiceAddBankAccountStreamServer{stream})
}

type BankAccountService_AddBankAccountStreamServer interface {
	Send(*AccountResulStream) error
	grpc.ServerStream
}

type bankAccountServiceAddBankAccountStreamServer struct {
	grpc.ServerStream
}

func (x *bankAccountServiceAddBankAccountStreamServer) Send(m *AccountResulStream) error {
	return x.ServerStream.SendMsg(m)
}

func _BankAccountService_AddAccounts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BankAccountServiceServer).AddAccounts(&bankAccountServiceAddAccountsServer{stream})
}

type BankAccountService_AddAccountsServer interface {
	SendAndClose(*Accounts) error
	Recv() (*BankAccount, error)
	grpc.ServerStream
}

type bankAccountServiceAddAccountsServer struct {
	grpc.ServerStream
}

func (x *bankAccountServiceAddAccountsServer) SendAndClose(m *Accounts) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bankAccountServiceAddAccountsServer) Recv() (*BankAccount, error) {
	m := new(BankAccount)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BankAccountService_AddAccountStreamBoth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BankAccountServiceServer).AddAccountStreamBoth(&bankAccountServiceAddAccountStreamBothServer{stream})
}

type BankAccountService_AddAccountStreamBothServer interface {
	Send(*AccountResulStream) error
	Recv() (*BankAccount, error)
	grpc.ServerStream
}

type bankAccountServiceAddAccountStreamBothServer struct {
	grpc.ServerStream
}

func (x *bankAccountServiceAddAccountStreamBothServer) Send(m *AccountResulStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bankAccountServiceAddAccountStreamBothServer) Recv() (*BankAccount, error) {
	m := new(BankAccount)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankAccountService_ServiceDesc is the grpc.ServiceDesc for BankAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BankAccountService",
	HandlerType: (*BankAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBankAccount",
			Handler:    _BankAccountService_AddBankAccount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddBankAccountStream",
			Handler:       _BankAccountService_AddBankAccountStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddAccounts",
			Handler:       _BankAccountService_AddAccounts_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddAccountStreamBoth",
			Handler:       _BankAccountService_AddAccountStreamBoth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bankAccount.proto",
}
